# -*- coding: utf-8 -*-
"""Calendário de voos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdFHM9Kk69PjZwHdAVWaZULbFq9Dzea4

# Algoritmos de otimização - calendário de voos

## Representação do problema
"""

pessoas = [('Lisboa', 'LIS'),
           ('Madrid', 'MAD'),
           ('Paris', 'CDG'),
           ('Dublin', 'DUB'),
           ('Bruxelas', 'BRU'),
           ('Londres', 'LHR')]

pessoas[5]

destino = 'FCO'

voos = {('BRU', 'FCO'): ['15:44', '18:55', 382]}

voos

voos[('BRU', 'FCO')]

voos[('BRU', 'FCO')][0], voos[('BRU', 'FCO')][1], voos[('BRU', 'FCO')][2]

voos = {}
for linha in open('/content/flights.txt'):
  #print(linha)
  #print(linha.split(','))
  origem, destino, saida, chegada, preco = linha.split(',')
  voos.setdefault((origem, destino), [])
  voos[(origem, destino)].append((saida, chegada, int(preco)))

voos

voos[('LIS', 'FCO')]

voos[('FCO', 'LIS')]

agenda = [1,2, 3,2, 7,3, 6,3, 2,4, 5,3]
len(agenda)

len(agenda) // 2

pessoas[1][1]

def imprimir_voos(agenda):
  id_voo = -1
  total_preco = 0
  for i in range(len(agenda) // 2):
    nome = pessoas[i][0]
    origem = pessoas[i][1]
    id_voo += 1
    ida = voos[(origem, destino)][agenda[id_voo]]
    total_preco += ida[2]
    id_voo += 1
    volta = voos[(destino, origem)][agenda[id_voo]]
    total_preco += volta[2]
    print('%10s%10s %5s-%5s %3s %5s-%5s %3s' % (nome, origem, ida[0], ida[1], ida[2],
                                                volta[0], volta[1], volta[2]))
  print('Preço total: ', total_preco)

agenda = [1,0, 3,2, 7,1, 6,3, 2,4, 5,3]
imprimir_voos(agenda)

10**12

"""## Fitness function"""

def fitness_function(agenda):
  id_voo = -1
  total_preco = 0
  for i in range(len(agenda) // 2):
    origem = pessoas[i][1]
    id_voo += 1
    ida = voos[(origem, destino)][agenda[id_voo]]
    total_preco += ida[2]
    id_voo += 1
    volta = voos[(destino, origem)][agenda[id_voo]]
    total_preco += volta[2]

  return total_preco

agenda = [1,7, 3,1, 1,1, 6,3, 2,4, 5,3]
fitness_function(agenda)

!pip install mlrose

import mlrose

fitness = mlrose.CustomFitness(fitness_function)

problema = mlrose.DiscreteOpt(length=12, fitness_fn=fitness,
                              maximize = False, max_val = 10)

"""## Hill climb"""

melhor_solucao, melhor_custo = mlrose.hill_climb(problema, random_state = 1)
melhor_solucao, melhor_custo

imprimir_voos(melhor_solucao)

voos[('BRU', 'FCO')]

"""## Simulated annealing"""

melhor_solucao, melhor_custo = mlrose.simulated_annealing(problema,
                                                          schedule=mlrose.decay.GeomDecay(init_temp=10000),
                                                          random_state=1)
melhor_solucao, melhor_custo

imprimir_voos(melhor_solucao)

"""## Algoritmo genético"""

melhor_solucao, melhor_custo = mlrose.genetic_alg(problema, pop_size=500, mutation_prob=0.2,
                                                  random_state=1)
melhor_solucao, melhor_custo

imprimir_voos(melhor_solucao)